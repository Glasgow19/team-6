{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/aakashbangar/Desktop/team-6/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/style.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport React, { useState } from 'react';\nimport { usePosition } from 'use-position'; //Define questionaire here:\n\nimport Questionaire from '../questions/disney'; //Define limit of question here: \n\nconst QUESTION_LIMIT = 10;\nlet questionNumber = 1;\nlet metric = 0;\nlet driven = false;\n\nconst Quiz = () => {\n  const {\n    latitude,\n    longitude,\n    timestamp,\n    accuracy,\n    error\n  } = usePosition();\n  const {\n    0: indexDriven,\n    1: setIndexDriven\n  } = useState(0);\n  const {\n    0: indexFiller,\n    1: setIndexFiller\n  } = useState(0);\n  const {\n    0: finished,\n    1: setFinished\n  } = useState(0);\n\n  const handleSubmit = event => {\n    const form = event.target;\n    console.log(form.elements.gender.value);\n    console.log(form.elements.age.value);\n    console.log();\n    console.log();\n  };\n\n  function answered(response) {\n    questionNumber += 1;\n\n    if (questionNumber == QUESTION_LIMIT) {\n      setFinished(1);\n    }\n\n    if (!driven) {\n      driven = true;\n      setIndexFiller(indexFiller + 1);\n    } else {\n      driven = false;\n      response == 1 ? metric += 0 : metric += 1;\n      setIndexDriven(indexDriven + 1);\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, finished ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \" Finished! \"), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" You got: \", Questionaire.data.results[metric].male, \" \"), __jsx(Form, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(Form.Group, {\n    controlId: \"exampleForm.ControlSelect1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Gender\"), __jsx(Form.Control, {\n    name: \"gender\",\n    as: \"select\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Male\"), __jsx(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Female\"), __jsx(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Other\"))), __jsx(Form.Group, {\n    controlId: \"exampleForm.ControlSelect2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Age\"), __jsx(Form.Control, {\n    name: \"age\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"buttonContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"info\",\n    type: \"submit\",\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Submit\")))) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \" \", Questionaire.data.title, \" \"), __jsx(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, console.log(_JSON$stringify(Questionaire)), __jsx(Card.Header, {\n    as: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \" Question \", questionNumber, \" \"), __jsx(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(Card.Title, {\n    className: \"questionTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \" \"), __jsx(Card.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, driven ? Questionaire.data.dataDrivenQuestions[indexDriven] : Questionaire.data.fillerQuestions[indexFiller]), __jsx(\"div\", {\n    className: \"buttonContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(Button, {\n    className: \"responseButton\",\n    variant: \"success\",\n    onClick: () => answered(1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Yes\"), __jsx(Button, {\n    className: \"responseButton\",\n    variant: \"danger\",\n    onClick: () => answered(0),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"No\"))))));\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/aakashbangar/Desktop/team-6/frontend/pages/index.js"],"names":["Form","Button","Card","React","useState","usePosition","Questionaire","QUESTION_LIMIT","questionNumber","metric","driven","Quiz","latitude","longitude","timestamp","accuracy","error","indexDriven","setIndexDriven","indexFiller","setIndexFiller","finished","setFinished","handleSubmit","event","form","target","console","log","elements","gender","value","age","answered","response","data","results","male","title","dataDrivenQuestions","fillerQuestions"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/style.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport React, { useState } from 'react';\nimport {usePosition} from 'use-position';\n\n//Define questionaire here:\nimport Questionaire from '../questions/disney';\n\n//Define limit of question here: \nconst QUESTION_LIMIT = 10; \n\nlet questionNumber = 1; \nlet metric = 0; \nlet driven = false; \n\nconst Quiz = () => {\n    const { latitude, longitude, timestamp, accuracy, error } = usePosition();\n    const [indexDriven, setIndexDriven] = useState(0);\n    const [indexFiller, setIndexFiller] = useState(0);\n    const [finished, setFinished] = useState(0);\n\n    const handleSubmit = event => {\n        const form = event.target;\n        console.log(form.elements.gender.value);\n        console.log(form.elements.age.value);\n        console.log();\n        console.log();\n    };\n\n    function answered(response) {\n        questionNumber += 1;\n\n        if(questionNumber == QUESTION_LIMIT) {\n            setFinished(1);\n        }\n\n        if(!driven) {\n            driven = true; \n            setIndexFiller(indexFiller + 1);\n        } else {\n            driven = false; \n            response == 1 ? metric += 0 : metric += 1; \n            setIndexDriven(indexDriven + 1);\n        }\n    }\n\n    return (\n        <div className='container'>\n            { finished\n                ? \n                    <div>\n                        <h1> Finished! </h1>\n                        <h2> You got: {Questionaire.data.results[metric].male} </h2>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                <Form.Label>Gender</Form.Label>\n                                <Form.Control name='gender' as=\"select\" required>\n                                    <option>Male</option>\n                                    <option>Female</option>\n                                    <option>Other</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId=\"exampleForm.ControlSelect2\">\n                                <Form.Label>Age</Form.Label>\n                                <Form.Control name='age'/>\n                            </Form.Group>\n                            <div className='buttonContainer'>\n                                <Button variant=\"info\" type=\"submit\" size=\"lg\">\n                                    Submit\n                                </Button>\n                            </div>        \n                        </Form>\n                    </div>\n                : \n                    <div>\n                        <h1> {Questionaire.data.title} </h1>\n                        <Card>\n                            { console.log(JSON.stringify(Questionaire)) }\n                            <Card.Header as=\"h5\"> Question {questionNumber} </Card.Header>\n                            <Card.Body>\n                                <Card.Title className=\"questionTitle\"> </Card.Title>\n                                <Card.Text>\n                                    {driven ? Questionaire.data.dataDrivenQuestions[indexDriven] : Questionaire.data.fillerQuestions[indexFiller]}\n                                </Card.Text>\n                                <div className='buttonContainer'>\n                                    <Button className='responseButton' variant=\"success\" onClick={() => answered(1)}>Yes</Button>\n                                    <Button className='responseButton' variant=\"danger\" onClick={() => answered(0)}>No</Button>\n                                </div>\n                            </Card.Body>\n                        </Card>\n                    </div>\n            }\n        </div>\n    );\n}\n  \nexport default Quiz;"]},"metadata":{},"sourceType":"module"}