{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/arianehine/Code4Good19/team-6/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/style.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport React, { useState } from 'react';\nimport { usePosition } from 'use-position';\n\nvar axios = require('axios'); //Define questionaire here:\n\n\nimport Questionaire from '../questions/disney'; //Define limit of question here: \n\nvar QUESTION_LIMIT = 10;\nvar questionNumber = 1;\nvar metric = 0;\nvar driven = false;\nvar user_id = 1;\nvar quiz_id = 1;\n\nvar Quiz = function Quiz() {\n  var _usePosition = usePosition(),\n      latitude = _usePosition.latitude,\n      longitude = _usePosition.longitude,\n      timestamp = _usePosition.timestamp,\n      accuracy = _usePosition.accuracy,\n      error = _usePosition.error;\n\n  var _useState = useState(0),\n      indexDriven = _useState[0],\n      setIndexDriven = _useState[1];\n\n  var _useState2 = useState(0),\n      indexFiller = _useState2[0],\n      setIndexFiller = _useState2[1];\n\n  var _useState3 = useState(0),\n      finished = _useState3[0],\n      setFinished = _useState3[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    var form = event.target;\n    var data = {\n      age: form.elements.age.value,\n      gender: form.elements.gender.value,\n      lat: latitude,\n      lng: longitude,\n      user_result: metric,\n      time: \"2019-09-20 09:20:10\",\n      user_id: user_id,\n      quiz_id: quiz_id\n    };\n    var request = new XMLHttpRequest();\n    request.open('POST', 'http://localhost:8080/addNewUserAndSurveyData', true);\n    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n    request.send(_JSON$stringify(data));\n  };\n\n  function answered(response) {\n    questionNumber += 1;\n    user_id += 1;\n    quiz_id += 1;\n\n    if (questionNumber == QUESTION_LIMIT) {\n      setFinished(1);\n    }\n\n    if (!driven) {\n      driven = true;\n      setIndexFiller(indexFiller + 1);\n    } else {\n      driven = false;\n      response == 1 ? metric += 0 : metric += 1;\n      setIndexDriven(indexDriven + 1);\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, finished ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \" Finished! \"), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \" You got: \", Questionaire.data.results[metric].male, \" \"), __jsx(Form, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Form.Group, {\n    controlId: \"exampleForm.ControlSelect1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Gender\"), __jsx(Form.Control, {\n    name: \"gender\",\n    as: \"select\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Male\"), __jsx(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Female\"), __jsx(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Other\"))), __jsx(Form.Group, {\n    controlId: \"exampleForm.ControlSelect2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Age\"), __jsx(Form.Control, {\n    name: \"age\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"buttonContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"info\",\n    type: \"submit\",\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Submit\")))) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \" \", Questionaire.data.title, \" \"), __jsx(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(Card.Header, {\n    as: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \" Question \", questionNumber, \" \"), __jsx(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(Card.Title, {\n    className: \"questionTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \" \"), __jsx(Card.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, driven ? Questionaire.data.dataDrivenQuestions[indexDriven] : Questionaire.data.fillerQuestions[indexFiller]), __jsx(\"div\", {\n    className: \"buttonContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, __jsx(Button, {\n    className: \"responseButton\",\n    variant: \"success\",\n    onClick: function onClick() {\n      return answered(1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Yes\"), __jsx(Button, {\n    className: \"responseButton\",\n    variant: \"danger\",\n    onClick: function onClick() {\n      return answered(0);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"No\"))))));\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/arianehine/Code4Good19/team-6/frontend/pages/index.js"],"names":["Form","Button","Card","React","useState","usePosition","axios","require","Questionaire","QUESTION_LIMIT","questionNumber","metric","driven","user_id","quiz_id","Quiz","latitude","longitude","timestamp","accuracy","error","indexDriven","setIndexDriven","indexFiller","setIndexFiller","finished","setFinished","handleSubmit","event","form","target","data","age","elements","value","gender","lat","lng","user_result","time","request","XMLHttpRequest","open","setRequestHeader","send","answered","response","results","male","title","dataDrivenQuestions","fillerQuestions"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/style.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport React, { useState } from 'react';\nimport {usePosition} from 'use-position';\nconst axios = require('axios');\n\n//Define questionaire here:\nimport Questionaire from '../questions/disney';\n\n//Define limit of question here: \nconst QUESTION_LIMIT = 10; \n\nlet questionNumber = 1; \nlet metric = 0; \nlet driven = false;\nlet user_id = 1;\nlet quiz_id = 1;\n\nconst Quiz = () => {\n    const { latitude, longitude, timestamp, accuracy, error } = usePosition();\n    const [indexDriven, setIndexDriven] = useState(0);\n    const [indexFiller, setIndexFiller] = useState(0);\n    const [finished, setFinished] = useState(0);\n\n    const handleSubmit = event => {\n        const form = event.target;\n\n        let data ={\n            age: form.elements.age.value,\n            gender: form.elements.gender.value,\n            lat: latitude,\n            lng: longitude,\n            user_result: metric,\n            time: \"2019-09-20 09:20:10\",\n            user_id: user_id,\n            quiz_id: quiz_id,\n        };\n\n        var request = new XMLHttpRequest();\n        request.open('POST', 'http://localhost:8080/addNewUserAndSurveyData', true);\n        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n        request.send(JSON.stringify(data));\n    }\n\n\n    function answered(response) {\n        questionNumber += 1;\n        user_id += 1;\n        quiz_id += 1;\n\n        if(questionNumber == QUESTION_LIMIT) {\n            setFinished(1);\n        }\n\n        if(!driven) {\n            driven = true; \n            setIndexFiller(indexFiller + 1);\n        } else {\n            driven = false; \n            response == 1 ? metric += 0 : metric += 1; \n            setIndexDriven(indexDriven + 1);\n        }\n    }\n\n    return (\n        <div className='container'>\n            { finished\n                ? \n                    <div>\n                        <h1> Finished! </h1>\n                        <h2> You got: {Questionaire.data.results[metric].male} </h2>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                <Form.Label>Gender</Form.Label>\n                                <Form.Control name='gender' as=\"select\" required>\n                                    <option>Male</option>\n                                    <option>Female</option>\n                                    <option>Other</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId=\"exampleForm.ControlSelect2\">\n                                <Form.Label>Age</Form.Label>\n                                <Form.Control name='age'/>\n                            </Form.Group>\n                            <div className='buttonContainer'>\n                                <Button variant=\"info\" type=\"submit\" size=\"lg\">\n                                    Submit\n                                </Button>\n                            </div>        \n                        </Form>\n                    </div>\n                : \n                    <div>\n                        <h1> {Questionaire.data.title} </h1>\n                        <Card>\n                            <Card.Header as=\"h5\"> Question {questionNumber} </Card.Header>\n                            <Card.Body>\n                                <Card.Title className=\"questionTitle\"> </Card.Title>\n                                <Card.Text>\n                                    {driven ? Questionaire.data.dataDrivenQuestions[indexDriven] : Questionaire.data.fillerQuestions[indexFiller]}\n                                </Card.Text>\n                                <div className='buttonContainer'>\n                                    <Button className='responseButton' variant=\"success\" onClick={() => answered(1)}>Yes</Button>\n                                    <Button className='responseButton' variant=\"danger\" onClick={() => answered(0)}>No</Button>\n                                </div>\n                            </Card.Body>\n                        </Card>\n                    </div>\n            }\n        </div>\n    );\n}\n  \nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}